STEP1:first make ui from bolt.new for prompt use chat gpt and put that prompt in bolt.new if you want in react write in prompt use react instead of typescript

STEP2: After that add signup and login page using clerk for that only required file to chat gpt like here app.tsx,main.tsx,header.tsx .But make your own Custom Sign-up componenet in clerk

STEP3:  Imagine you built a toy car to play with at home. It's great for practicing and testing ideas, but it's not built to handle a busy road or carry many passengers safely. Flask’s built-in server is like that toy car—perfect for development (testing and building your app) but not strong or secure enough for a busy real-world road (a production environment).

Simple Example
Development Server (Flask’s built-in server):
When you run your app with python app.py, Flask starts a simple server that reloads automatically when you change your code. This is great for testing on your computer but it's not built to handle heavy traffic or secure data if many people use it.

Production Server (e.g., Gunicorn):
When you're ready to share your app with lots of people, you use a production server like Gunicorn. For example, after installing Gunicorn (pip install gunicorn), you can start your app by running:

bash
Copy
Edit
gunicorn app:app
This tells Gunicorn to use the Flask app defined in app.py (where app is the name of your Flask application). Gunicorn is designed to handle many users and provide better security and performance.

In Short
Flask Built-in Server:

Good for testing and development.
Not secure or fast enough for many users.
Production Server (e.g., Gunicorn):

Designed to handle lots of traffic.
More secure and reliable for a live website.



STEP4:  $ python -m venv venv
$ source venv/Scripts/activate
$ pip show python-dotenv
$ pip install requests


STEP5: go in root folder 
 git add .
 git commit -m "write here what you changes for future checking"
 git push origin master
git status to show what changes happen in any happy



STEP6:  docker run --name my-redis -p 6379:6379 -d redis
 this command first search for image in docker hub if not created it create by pull and then it all create container whose name is my-redis this is good command automatically doing all TASK1



STEP7:  docker ps
This command lists all running containers, and you should see your "my-redis" container there.

STEP8: docker-compose up --build -d
    docker-compose down

STEP9: To create image 
 docker build -t (write name of image) 

STEP10: To remove image
 docker image rm  (image name)

by writing f you can delete forcefully do chatgpt i am not sure like docker image -rm imagename -fast
{-f means if container are running then you want to delete image in that case it work}

STEP11: docker ps -a